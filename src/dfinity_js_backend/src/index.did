service: () -> {
    createCampaign: (record {name:text; description:text; created_by:text}) -> (variant {Ok:record {id:text; updated_at:text; name:text; description:text; created_at:text; created_by:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}});
    createDonation: (record {donor_name:text; amount:nat64; campaign_id:text}, record {username:text; role:variant {CampaignManager; Donor; Admin}}) -> (variant {Ok:record {id:text; created_at:text; donor_name:text; amount:nat64; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}});
    createExpense: (record {description:text; amount:nat64; campaign_id:text}, record {username:text; role:variant {CampaignManager; Donor; Admin}}) -> (variant {Ok:record {id:text; description:text; created_at:text; amount:nat64; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}});
    createMessage: (record {content:text; sender:text; campaign_id:text}, record {username:text; role:variant {CampaignManager; Donor; Admin}}) -> (variant {Ok:record {id:text; content:text; created_at:text; sender:text; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}});
    createUser: (record {username:text; role:variant {CampaignManager; Donor; Admin}}) -> (variant {Ok:record {id:text; username:text; owner:principal; role:variant {CampaignManager; Donor; Admin}; created_at:text; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}});
    createVoterOutreach: (record {status:text; date:text; campaign_id:text; activity:text}, record {username:text; role:variant {CampaignManager; Donor; Admin}}) -> (variant {Ok:record {id:text; status:text; date:text; created_at:text; campaign_id:text; activity:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}});
    getCampaignById: (text) -> (variant {Ok:record {id:text; updated_at:text; name:text; description:text; created_at:text; created_by:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getCampaigns: () -> (variant {Ok:vec record {id:text; updated_at:text; name:text; description:text; created_at:text; created_by:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getDonationById: (text) -> (variant {Ok:record {id:text; created_at:text; donor_name:text; amount:nat64; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getDonationsByCampaignId: (text) -> (variant {Ok:vec record {id:text; created_at:text; donor_name:text; amount:nat64; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getExpensesByCampaignId: (text) -> (variant {Ok:vec record {id:text; description:text; created_at:text; amount:nat64; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getMessagesBycampaignId: (text) -> (variant {Ok:vec record {id:text; content:text; created_at:text; sender:text; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getNotificationsByCampaignId: (text) -> (variant {Ok:vec record {id:text; created_at:text; message:text; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getNotificationsById: (text) -> (variant {Ok:vec record {id:text; created_at:text; message:text; campaign_id:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getUserByUsername: (text) -> (variant {Ok:record {id:text; username:text; owner:principal; role:variant {CampaignManager; Donor; Admin}; created_at:text; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getUsers: () -> (variant {Ok:vec record {id:text; username:text; owner:principal; role:variant {CampaignManager; Donor; Admin}; created_at:text; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getUsersByRole: (variant {CampaignManager; Donor; Admin}) -> (variant {Ok:vec record {id:text; username:text; owner:principal; role:variant {CampaignManager; Donor; Admin}; created_at:text; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    getVoterOutreachByCampaignId: (text) -> (variant {Ok:vec record {id:text; status:text; date:text; created_at:text; campaign_id:text; activity:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}}) query;
    updateCampaign: (text, record {name:text; description:text; created_by:text}) -> (variant {Ok:record {id:text; updated_at:text; name:text; description:text; created_at:text; created_by:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text}});
}
